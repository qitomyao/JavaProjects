<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
mapper根标签, namespace写上对应的是哪一个接口的映射关系
select标签, 专门对应查询方法
    id, 标记唯一的方法名
    resultType, 返回结果对象, 如果是集合如List, 不用写集合, 写里面的对象 （写包名+类名）
-->
<mapper namespace="au.net.tomtech.mapper.UserMapper"> <!--包名.接口名-->
    <select id="selectAll" resultType="User">
        select * from user; <!-- SQL语句 -->
    </select>
    <!--
        #{变量} select * from user where id = ?; ?表示占位符，是预编译的效果，不会有SQL注入的问题
        ${变量} select * from user where id = ${id}; 直接拼接拼接字符串, sql注入的问题
        parameterType 表示参数类型, 基本上不写
        特殊字符需要被处理
            转义的字符 - CD转义符 <![CDATA[ SQL语句 ]]>
    -->
    <select id="selectById" resultType="User">
        <![CDATA[
        select * from user where id = #{id};
        ]]>
    </select>

    <delete id ="deleteById">
        delete from user where id = #{id};
    </delete>
    <!--
    update标签:编写修改的操作语句
    user对象作为参数, myBatis可以解析这个对象, 直接使用里面的成员变量
    -->
    <update id="update">
        update user set username=#{username}, birthday=#{birthday}, sex=#{sex},
                        address=#{address} where id = #{id};
    </update>

    <!--
        insert标签
        user对象作为参数, myBatis可以解析这个对象, 直接使用里面的成员变量
        useGeneratedKeys="true" 要获取数据库返回的主键值
        keyProperty="id" 把获取到的主键值放回原来的对象的id属性里面
    -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into user values (null, #{username}, #{birthday}, #{sex}, #{address});
        <!--  id是自增量,因此使用Null -->
    </insert>

    <select id="selectByCondition" resultType="user">
        select * from user where username like #{username} and sex =#{sex}
    </select>

    <!--
        if标签:做条件判断
        test 属性: 判断条件, 如果为true, 则拼接里面的SQL
                  判断的参数不用带上#{}, 直接写参数名或者说对象的成员变量
        where 标签 有条件的时候充当where关键字, 还能去掉多余的and或者or 没有查询条件的时候自动消失

    -->
    <select id="selectByIf" resultType="user">
        select * from user
        <where>
            <if test="username != null and username != ''">
                username like #{username}
            </if>
            <if test="sex!=null and sex !=''">
                and sex = #{sex};
            </if>
        </where>
    </select>
    <!--
    根据if判断结果来处理修改的参数
    如果只有if条件判断语句的话, 当最后一个参数没有输入, 会出现多余的逗号
    使用set标签, 可以去掉多余的逗号
    -->
    <update id="updateByIf">
        update user
        <set>
            <if test="username!=null and username!=''">
                username = #{username},
            </if>
            <if test="birthday!=null">
                birthday = #{birthday},
            </if>
            <if test="sex!=null and sex!=''">
                sex=#{sex},
            </if>
            <if test="address!=null and address!=''">
                address=#{address}
            </if>
        </set>
        where id = #{id};
    </update>

    <!--
        如果用户需要批量删除数据的时候, 直接id=#{id}是不够用的
        foreach标签: 可以遍历数组或者集合
        collection: 被遍历的数组或者集合的名字
        item: 表示遍历之后, 每一个参数的变量名
        seperator: 遍历的每一个参数之间的间隔逗号
        open: 遍历前添加的内容
        close: 遍历后添加的内容
        #{变量名}: item的值
    -->
    <delete id="deleteByArray">
        delete from user where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>
    <!--
        when: 匹配一个条件
        otherwise: 所有条件不匹配时执行
    -->
    <select id="selectBySex" resultType="User">
        select * from user
        <where>
            <choose>
                <when test = "sex == 0">
                    sex = '男'
                </when>
                <when test = "sex == 1">
                    sex = '女'
                </when>
                <otherwise>
                    sex = '女'
                </otherwise>
            </choose>
        </where>
    </select>

    <!--  sql标签:放抽取出来的数据
    id:引入的时候的唯一标识
    include标签:可以引入sql标签抽取的代码
    refid:引入的sql标签是哪一个-->
    <sql id="userInfo" >
        id,username,birthday,sex,address
    </sql>
    <select id="selectBySQL" resultType="User">
        select
        <include refid="userInfo" />
        from user
    </select>


    <select id="selectField" resultType="String">
        SELECT username FROM user where id in (select id from user where address= #{address});
    </select>

    <select id="selectField2" resultType="String">
        SELECT username FROM user
        <where>
            id in (select id from user
            <where>
                <if test="address !=null and username !=''">
                    address = #{address}
                </if>
            </where>
            )
        </where>
    </select>
</mapper>


