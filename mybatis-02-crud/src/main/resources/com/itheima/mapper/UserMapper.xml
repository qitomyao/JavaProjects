<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
mapper根标签，namespace写上对应的是哪一个接口的映射关系
select标签:专门对应查询方法的
id:标记唯一的方法名
resultType:返回结果对象，如果是集合如List，不用写集合，写里面的对象
            包名+类名
-->
<mapper namespace="com.itheima.mapper.UserMapper">



    <select id="selectAll" resultType="User">
        select * from user;
    </select>

    <!--
        在mapper.xml中的标签里面注释代码，不要用快捷键生成
        #{变量}  select * from user where id = ?; ?表示占位符，是预编译的效果，不会有SQL注入的问题
        ${变量}   select * from user where id = 1; 直接拼接字符串，SQL注入的问题
        resultType 封装的结果对象，如果返回需要集合，可以直接写对象
        parameterType 表示参数类型,基本上不写
        特殊字符需要被处理
            转义的字符deleteById2
            CD转义符
        定义的方法从业务角度出发，只需要或者说只能有一个结果对象，但是返回了多个，会报这个异常
        Expected one result (or null) to be returned by selectOne(), but found: 3
        -->
    <select id="selectById" resultType="User" >
   <!--     select * from user where id = ${id};
        select * from user where id = #{id};
        select * from user where id &lt; #{id};-->
        <![CDATA[
        select * from user where id = #{id};
        ]]>
    </select>

    <!--
    delete标签:写删除语句
    -->
    <delete id="deleteById">
        delete from user where id = #{id}
    </delete>

    <!--
    不要写这样的代码，对应的SQL要写在对应的标签里面
    -->
    <select id="deleteById2" >
        delete from user where id = #{id}
    </select>

    <!--
    update标签:编写修改的操作语句
    user对象作为参数，myBatis可以解析这个对象，直接使用里面的成员变量
    -->
    <update id="update">
        update user set username=#{username},birthday=#{birthday},
                        sex=#{sex},address=#{address} where id = #{id};
    </update>
    <!--
    insert标签:编写插入的SQL语句
    user对象作为参数，myBatis可以解析这个对象，直接使用里面的成员变量
    useGeneratedKeys="true" 要获取数据库返回的主键值
    keyProperty="id" 把获取到的主键值放回原来的对象的id属性里面
    注意不要和修改混淆了哈
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into user values(null,username=#{username},birthday=#{birthday}, sex=#{sex},address=#{address});
    </insert>
     -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into user values(#{id},#{username},#{birthday},#{sex},#{address});
    </insert>

    <!--
    多参数查询用户信息
    mybatis在多参数条件的时候，默认只按照这两种传参方式
    [ arg0, arg1
    param1, param2]
    -->
    <select id="selectByCondition" resultType="com.itheima.pojo.User">
        select * from user where username like #{username}
                             and sex = #{sex};
    </select>

    <!--
    if标签:做条件判断
    test 属性:判断条件，如果为true,则拼接里面的SQL
             判断的参数不用带上#{},直接写参数名或者说对象的成员变量
    where 有条件的时候充当where关键字，还能把多余的and或者or去掉
            没有查询条件的时候呢，自动消失
    -->
    <select id="selectByIf" resultType="com.itheima.pojo.User">
        select * from user
        <where>
            <if test="username != null and username!='' " >
                username like #{username}
            </if>
            <if test="sex!=null and sex !=''" >
                and sex = #{sex};
            </if>
        </where>
    </select>


    <!--
    根据if判断结果来处理修改的参数
    如果只有if条件判断语句的话，当最后一个参数没有输入 会出现多余的,
    update user set username=?, sex=?, where id = ?;
    使用set标签，可以去掉多余的,
    -->
    <update id="updateByIf">
        update user
        <set>
            <if test="username!=null and username!=''" >
                username=#{username},
            </if>
            <if test="birthday!=null" >
                birthday=#{birthday},
            </if>
            <if test="sex!=null and sex!=''" >
                sex=#{sex},
            </if>
            <if test="address!=null and address!=''" >
                address=#{address}
            </if>
        </set>
            where id = #{id};
    </update>

<!--
如果用户需要批量删除数据的时候，直接id=#{id}是不够用的
foreach标签：可以遍历数组或者集合
collection:被遍历的数组或者集合的名字
item:表示遍历之后，每一个参数的变量名，
separator:遍历的每一个参数之间的间隔逗号
open:遍历前添加的内容
close:遍历后添加的内容
 #{变量名}:item的值
-->
    <delete id="deleteByArray">
        delete from user where id in
        <foreach collection="ids" item="id"  separator="," open="(" close=")" >
            #{id}
        </foreach>
    </delete>

    <select id="selectBySex" resultType="com.itheima.pojo.User">
        select * from user
        <where>
            <choose>
                <when test="sex == 0">
                    sex = '男'
                </when>
                <when test="sex == 1">
                    sex = '女'
                </when>
                <otherwise>
                    sex = '女'
                </otherwise>
            </choose>
        </where>
    </select>

    <!--  sql标签:放抽取出来的数据
    id:引入的时候的唯一标识
    include标签:可以引入sql标签抽取的代码
    refid:引入的sql标签是哪一个-->
    <sql id="userInfo" >
        id,username,birthday,sex,address
    </sql>
    <select id="selectBySQL" resultType="com.itheima.pojo.User">
        select
        <include refid="userInfo" />
        from user
    </select>


</mapper>